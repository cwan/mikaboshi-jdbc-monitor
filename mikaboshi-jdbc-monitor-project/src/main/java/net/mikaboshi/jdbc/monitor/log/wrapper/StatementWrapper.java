package net.mikaboshi.jdbc.monitor.log.wrapper;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * JDBCログを取得するための {@link Statement} ラッパークラス。
 * 本来の処理は全てコンストラクタに指定した {@code Statement} オブジェクトに委譲する。
 * 
 * @author Takuma Umezawa
 * @since 1.4.0
 */
public class StatementWrapper implements Statement {

	private Statement statement;
	private Connection connection;
	
	public StatementWrapper(Statement statement, Connection connection) {
		this.statement = statement;
		this.connection = connection;
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		this.statement.addBatch(sql);
	}

	@Override
	public void cancel() throws SQLException {
		this.statement.cancel();
	}

	@Override
	public void clearBatch() throws SQLException {
		this.statement.clearBatch();
	}

	@Override
	public void clearWarnings() throws SQLException {
		this.statement.clearWarnings();
	}

	@Override
	public void close() throws SQLException {
		this.statement.close();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return this.statement.execute(sql);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return this.statement.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return this.statement.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return this.statement.execute(sql, columnNames);
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return this.statement.executeBatch();
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return this.statement.executeQuery(sql);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return this.statement.executeUpdate(sql);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return this.statement.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return this.statement.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return this.statement.executeUpdate(sql, columnNames);
	}

	@Override
	public Connection getConnection() throws SQLException {
		return this.connection;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return this.statement.getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return this.statement.getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return this.statement.getGeneratedKeys();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return this.statement.getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return this.statement.getMaxRows();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return this.statement.getMoreResults();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return this.statement.getMoreResults();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return this.statement.getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return this.statement.getResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return this.statement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return this.statement.getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return this.getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return this.statement.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return this.statement.getWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		this.statement.setCursorName(name);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		this.statement.setEscapeProcessing(enable);
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		this.statement.setFetchDirection(direction);
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		this.statement.setFetchSize(rows);
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		this.statement.setMaxFieldSize(max);
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		this.statement.setMaxRows(max);
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		this.statement.setQueryTimeout(seconds);
	}

	@Override
	public boolean isClosed() throws SQLException {
		return this.statement.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return this.statement.isPoolable();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		this.statement.setPoolable(poolable);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return this.statement.isWrapperFor(iface);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return this.statement.unwrap(iface);
	}
}

